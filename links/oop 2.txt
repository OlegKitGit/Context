#Python 3 object-oriented programming

class diagram, association, class relationship, multiplicity, cardinality, <oop

This diagram tells us that oranges go in baskets with a little arrow showing what goes in what. It also tells us the number of that object that can be used in the association on both sides of the relationship. One Basket can hold many (represented by a *) Orange objects. Any one Orange can go in exactly one Basket. This number is referred to as the multiplicity of the object. You may also hear it described as the cardinality. These are actually slightly distinct terms. Cardinality refers to the actual number of items in the set, whereas multiplicity specifies how small or how large this number could be. I frequently forget which side of a relationship the multiplicity goes on. The multiplicity nearest to a class is the number of objects of that class that can be associated with any one object at the other end of the association
Эта диаграмма говорит нам, что апельсины идут в корзинах с небольшой стрелкой, показывающей, что происходит в чем. Он также указывает нам номер этого объекта, который может использоваться в ассоциации по обе стороны от отношения. Одна корзина может содержать много (представленных *) оранжевыми объектами. Любой оранжевый может идти ровно в одну корзину. Это число называется множественностью объекта. Вы также можете услышать, что это описывается как мощность. На самом деле это немного разные термины. Кардинальность относится к фактическому количеству элементов в наборе, тогда как множественность указывает, насколько мала или насколько велика эта цифра. Я часто забываю, с какой стороны отношений происходит множественность. Множественность, ближайшая к классу, - это количество объектов этого класса, которые могут быть связаны с каким-либо одним объектом на другом конце ассоциации

object, class, association, <oop

Objects are instances of classes that can be associated with each other.

object, object instance, data, behavior, class, <oop

An object instance is a specific object with its own set of data and behaviors; a specific orange on the table in front of us is said to be an instance of the general class of oranges.

data, object, <oop

Data typically represents the individual characteristics of a certain object.

class, characteristics, object, <oop

A class can define specific sets of characteristics that are share d by all objects of that class.

object, data, characteristics, class, attribute, instance of class, value, <oop

Any specific object can have different data values for the given characteristics. For example, our three oranges on the table (if we haven't eaten any) could each weigh a different amount. The orange class could then have a weight attribute. All instances of the orange class have a weight attribute, but each orange 
has a different value for this attribute. Attributes don't have to be unique, though; any two oranges may weigh the same amount. As a more realistic example, two objects representing different customers might have the same value for a first name attribute.

attribute, member, propertie, settable, read-only, <oop

Attributes are frequently referred to as members or properties. Some authors 
suggest that the terms have different meanings, usually that attributes are settable, 
while properties are read-only. In Python, the concept of "read-only" is rather 
pointless, so throughout this book, we'll see the two terms used interchangeably. In 
addition, as we'll discuss in Chapter 5, When to Use Object-oriented Programming, the 
property keyword has a special meaning in Python for a particular kind of attribute. 

propertie, class, <oop 

Some of these properties may also belong to multiple classes (we may want to know when apples are picked, too)

design, type, attribute, primitive, data structure, programming, object, <oop

Depending on how detailed our design needs to be, we can also specify the type 
for each attribute. Attribute types are often primitives that are standard to most 
programming languages, such as integer, floating-point number, string, byte, or 
Boolean. However, they can also represent data structures such as lists, trees, or 
graphs, or most notably, other classes. This is one area where the design stage can 
overlap with the programming stage. The various primitives or objects available in 
one programming language may be somewhat different from what is available in 
other languages.

data type, design, programming, generic names, <oop

Usually, we don't need to be overly concerned with data types at the design stage, as 
implementation-specific details are chosen during the programming stage. Generic 
names are normally sufficient for design. 

Python, list, tuple, Java, LinkedList, ArrayList, <data structure

If our design calls for a list container type, the Java programmers can choose to use a LinkedList or an ArrayList when 
implementing it, while the Python programmers (that's us!) can choose between the 
list built-in and a tuple.

attribute, primitive, implicit attribute, explicit attribute, association, <oop

In our fruit-farming example so far, our attributes are all basic primitives. However, 
there are some implicit attributes that we can make explicit—the associations.  
For a given orange, we might have an attribute containing the basket that holds  
that orange.

data, behavior, object, <oop

Now, we know what data is, but what are behaviors? 

behavior, action, object, <oop  

Behaviors are actions that can occur on an object. 

behavior, class, method, <oop 

The behaviors that can be performed on a specific class of 
objects are called methods. 

data, object, programming, method, function, structured programming, <oop  

At the programming level, methods are like functions in 
structured programming, but they magically have access to all the data associated with 
this object. 

function, method, parameter, value, <oop

Like functions, methods can also accept parameters and return values.











