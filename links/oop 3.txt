#Python 3 object-oriented programming

parameter, method, list of objects, argument, calling object, behavior, task, result, <oop   

Parameters to a method are a list of objects that need to be passed into the method 
that is being called (the objects that are passed in from the calling object are usually 
referred to as arguments). These objects are used by the method to perform whatever 
behavior or task it is meant to do. Returned values are the results of that task.
Параметры метода - это список объектов, которые необходимо передать в метод
который вызывается (объекты, которые передаются от вызывающего объекта, обычно
называются аргументами). Эти объекты используются методом для выполнения
поведения или задачи, которые она должна выполнять. Возвращенные значения - это результаты этой задачи.

application example, action, implementation, parameter, <oop

We've stretched our "comparing apples and oranges" example into a basic (if far-
fetched) inventory application. Let's stretch it a little further and see if it breaks. 
One action that can be associated with oranges is the pick action. If you think about 
implementation, pick would place the orange in a basket by updating the basket 
attribute of the orange, and by adding the orange to the oranges list on the Basket. 
So, pick needs to know what basket it is dealing with. We do this by giving the pick 
method a basket parameter. Since our fruit farmer also sells juice, we can add a 
squeeze method to Orange. When squeezed, squeeze might return the amount of 
juice retrieved, while also removing the Orange from the basket it was in.
Basket can have a sell action. When a basket is sold, our inventory system 
might update some data on as-yet unspecified objects for accounting and profit 
calculations. Alternatively, our basket of oranges might go bad before we can sell 
them, so we add a discard method. Let's add these methods to our diagram:
Мы поместили пример «сравнения яблок и апельсинов» в базовый (если далеко -
). Давайте растянем его немного дальше и посмотрим, не сломается ли он.
Одним действием, которое может быть связано с апельсинами, является действие выбора. Если вы думаете о
реализация, выбор будет помещать оранжевый в корзину, обновив корзину
атрибут апельсина и добавление оранжевого в список апельсинов на корзине.
Поэтому выберите, что нужно знать, с какой корзиной оно связано. Мы делаем это, отдавая выбор
метод параметр корзины. Поскольку наш фруктовый фермер также продает сок, мы можем добавить
сжать метод до оранжевого. При сжатии сжатие может вернуть количество
извлеченный сок, а также удалив оранжевый из корзины, в которой он находился.
Корзина может быть продана. Когда корзина продается, наша система инвентаризации
может обновить некоторые данные о пока еще неопределенных объектах для учета и прибыли
расчеты. В качестве альтернативы, наша корзина апельсинов может испортиться, прежде чем мы сможем продать
их, поэтому мы добавляем метод отбрасывания. Давайте добавим эти методы к нашей диаграмме:

model, method, object, system of interacting objects, class, data, <oop

Adding models and methods to individual objects allows us to create a system of 
interacting objects. Each object in the system is a member of a certain class. These 
classes specify what types of data the object can hold and what methods can be 
invoked on it.

data, state, object, method, <oop

The data in each object can be in a different state from other objects  
of the same class, and each object may react to method calls differently because of  
the differences in state.

ooa, ood, object, interaction, <oop

Object-oriented analysis and design is all about figuring out what those objects are 
and how they should interact.

modeling, object, ood, public interface, interface, <oop

The key purpose of modeling an object in object-oriented design is to determine what 
the public interface of that object will be.

interface, collection, attribute, method, object, interaction, <oop

The interface is the collection of attributes and methods that other objects can use to interact with that object.

object, internal workings, interface, method, calling object, <oop

They do not need, and are often not allowed, to access the internal workings of the object. A common 
real-world example is the television. Our interface to the television is the remote 
control. Each button on the remote control represents a method that can be called on 
the television object. When we, as the calling object, access these methods, we do not 
know or care if the television is getting its signal from an antenna, a cable connection, 
or a satellite dish. We don't care what electronic signals are being sent to adjust the 
volume, or whether the sound is destined to speakers or headphones. If we open the 
television to access the internal workings, for example, to split the output signal to 
both external speakers and a set of headphones, we will void the warranty.

implementation, functional details, object, information hidng, encapsulation, <oop

This process of hiding the implementation, or functional details, of an object is 
suitably called information hiding. It is also sometimes referred to as encapsulation, 
but encapsulation is actually a more all-encompassing term.

encapsulation, encapsulated data, <oop

Encapsulated data is not necessarily hidden. Encapsulation is, literally, creating a capsule and so think  
of creating a time capsule. If you put a bunch of information into a time capsule,  
lock and bury it, it is both encapsulated and the information is hidden. On the other 
hand, if the time capsule has not been buried and is unlocked or made of clear 
plastic, the items inside it are still encapsulated, but there is no information hiding.
Инкапсулированные данные не обязательно скрытые. Инкапсуляция - это буквально создание капсулы, 
и поэтому создания временной капсулы. Если вы поместите кучу информации во временную капсулу,
заблокировать и похоронить его, он как инкапсулирован, так и информация скрыта. С другой
если капсула времени не была захоронена и разблокирована или сделана прозрачной
пластик, элементы внутри него по-прежнему инкапсулированы, но нет никакой информации, скрывающей.

encapsulation, information hiding, design, Python, <oop

The distinction between encapsulation and information hiding is largely 
irrelevant, especially at the design level. Many practical references use these terms 
interchangeably. As Python programmers, we don't actually have or need true 
information hiding

public interface, changing the interface, client object, calling object, attribute name, type of argument, <oop  

The public interface, however, is very important. It needs to be carefully designed  
as it is difficult to change it in the future. Changing the interface will break any client 
objects that are calling it. We can change the internals all we like, for example, to 
make it more efficient, or to access data over the network as well as locally, and the 
client objects will still be able to talk to it, unmodified, using the public interface. 
On the other hand, if we change the interface by changing attribute names that are 
publicly accessed, or by altering the order or types of arguments that a method can 
accept, all client objects will also have to be modified. While on the topic of public 
interfaces, keep it simple. Always design the interface of an object based on how easy 
it is to use, not how hard it is to code (this advice applies to user interfaces as well).
Однако публичный интерфейс очень важен. Он должен быть тщательно разработан
поскольку его трудно изменить в будущем. Изменение интерфейса приведет к поломке любого клиента
объекты, которые его вызывают. Мы можем изменить внутренние элементы, которые нам нравятся, например,
сделать его более эффективным или получить доступ к данным через сеть, а также локально, а также
клиентские объекты будут по-прежнему иметь возможность разговаривать с ним без изменений, используя открытый интерфейс.
С другой стороны, если мы изменим интерфейс, изменив имена атрибутов, которые
публичный доступ или изменение порядка или типов аргументов, которые могут
accept, все клиентские объекты также должны быть изменены. В то время как по
интерфейсы, прост. Всегда создавайте интерфейс объекта на основе того, насколько легко
он должен использовать, а не как трудно его кодировать (этот совет относится и к пользовательским интерфейсам).

model, object, modeling, concept, <oop

Remember, program objects may represent real objects, but that does not make  
them real objects. They are models. One of the greatest gifts of modeling is the  
ability to ignore irrelevant details. The model car I built as a child may look like a 
real 1956 Thunderbird on the outside, but it doesn't run and the driveshaft doesn't 
turn. These details were overly complex and irrelevant before I started driving.  
The model is an abstraction of a real concept.

abstraction, encapsulation, information hiding, task, public interface, inner details, level of abstraction, <oop  

Abstraction is another object-oriented concept related to encapsulation and 
information hiding. Simply put, abstraction means dealing with the level of detail 
that is most appropriate to a given task. It is the process of extracting a public 
interface from the inner details. A driver of a car needs to interact with steering, 
gas pedal, and brakes. The workings of the motor, drive train, and brake subsystem 
don't matter to the driver. A mechanic, on the other hand, works at a different level 
of abstraction, tuning the engine and bleeding the breaks. Here's an example of two 
abstraction levels for a car:

abstraction, encapsulation, public interface, privat interface, information hiding, <oop 

abstraction is the process of encapsulating information with separate public and private interfaces. The private interfaces can be subject to information hiding.

model, object, interaction, details, method, property

The important lesson to take from all these definitions is to make our models 
understandable to other objects that have to interact with them. This means paying 
careful attention to small details. Ensure methods and properties have sensible names. 

ooa, object, noun, method, verb, attribute, adjective <oop

When analyzing a system, objects typically represent nouns in the original problem, 
while methods are normally verbs. Attributes can often be picked up as adjectives, 
although if the attribute refers to another object that is part of the current object, it  
will still likely be a noun. Name classes, attributes, and methods accordingly.


model, object, action, task, system, design, level of abstraction, requirement, abstracting interfaces, <oop

Don't try to model objects or actions that might be useful in the future. Model exactly 
those tasks that the system needs to perform, and the design will naturally gravitate 
towards the one that has an appropriate level of abstraction. This is not to say we 
should not think about possible future design modifications. Our designs should be 
open ended so that future requirements can be satisfied. However, when abstracting 
interfaces, try to model exactly what needs to be modeled and nothing more.
Не пытайтесь моделировать объекты или действия, которые могут быть полезны в будущем. Модель точно
те задачи, которые система должна выполнять, и дизайн, естественно, будет тяготеть
к той, которая имеет соответствующий уровень абстракции. Это не значит, что мы
не следует думать о возможных будущих модификациях проекта. Наши проекты должны быть
с открытым концом, чтобы удовлетворить будущие потребности. Однако при абстрагировании
интерфейсов, попробуйте точно смоделировать то, что нужно смоделировать, и не более того.


design, interface, object, privacy, task, <oop

When designing the interface, try placing yourself in the object's shoes and imagine 
that the object has a strong preference for privacy. Don't let other objects have access 
to data about you unless you feel it is in your best interest for them to have it. Don't 
give them an interface to force you to perform a specific task unless you are certain 
you want them to be able to do that to you.








